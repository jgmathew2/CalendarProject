{"ast":null,"code":"import Task from \"./Task\";\nexport default class TaskDictionary {\n  constructor() {\n    // Key should be date in the form of a int, day/month/year\n    this.dict = {};\n  }\n  contructor() {}\n  static addTask(date, Task) {\n    if (dict.date == null) dict.date = [Task];else dict.date.push(Task);\n  }\n  static sortDict() {\n    dict.sort((a, b) => {\n      while (a % 100 === b % 100) {\n        a /= 100;\n        b /= 100;\n        if (a === 0) break;\n      }\n      return a % 100 - b % 100;\n    });\n  }\n  static getTasks(day) {\n    return dict[day];\n  }\n  static convertDate(date) {\n    let value = \"\";\n    value += date.getDay();\n    if (date.getMonth() < 10) value += \"0\" + date.getMonth();\n    value += date.getYear() % 100;\n\n    // Returns string, have to parse to get dict data \n\n    return value;\n  }\n\n  // Returns date given number input \n  static revertDate(number) {\n    let year = number % 100 + 2000;\n    number /= 100;\n    let month = number % 100;\n    number /= 100;\n    let day = number % 100;\n    let date = new Date(year, month, day);\n    return date;\n  }\n}","map":{"version":3,"names":["Task","TaskDictionary","constructor","dict","contructor","addTask","date","push","sortDict","sort","a","b","getTasks","day","convertDate","value","getDay","getMonth","getYear","revertDate","number","year","month","Date"],"sources":["/Users/johanmathew/Documents/Web Design Folder/react-test/src/utility/TaskDictionary.js"],"sourcesContent":["import Task from \"./Task\"; \n\nexport default class TaskDictionary {\n\n    // Key should be date in the form of a int, day/month/year\n\n    dict = {}; \n\n    contructor() {}\n\n    static addTask(date, Task) {\n\n        if(dict.date == null) dict.date = [Task]; \n\n        else dict.date.push(Task); \n\n\n    }\n\n\n    static sortDict() {\n        dict.sort((a, b) => {\n\n            while(a % 100 === b % 100) {\n                a /= 100; \n                b /= 100; \n\n                if(a === 0) break; \n            }\n\n            return a % 100 - b % 100; \n        }); \n    }\n\n    static getTasks(day) {\n        return dict[day]; \n    }\n\n    static convertDate(date) {\n        let value = \"\"; \n\n        value += date.getDay(); \n\n        if(date.getMonth() < 10) value += \"0\" + date.getMonth(); \n\n        value += date.getYear() % 100; \n\n        // Returns string, have to parse to get dict data \n\n        return value; \n\n    }\n\n    // Returns date given number input \n    static revertDate(number) {\n\n        let year = number % 100 + 2000; \n        number /= 100; \n        let month = number % 100; \n        number /= 100; \n        let day = number % 100; \n\n        let date = new Date(year, month, day); \n\n        return date; \n\n        \n\n\n    }\n\n\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,eAAe,MAAMC,cAAc,CAAC;EAAAC,YAAA;IAEhC;IAAA,KAEAC,IAAI,GAAG,CAAC,CAAC;EAAA;EAETC,UAAUA,CAAA,EAAG,CAAC;EAEd,OAAOC,OAAOA,CAACC,IAAI,EAAEN,IAAI,EAAE;IAEvB,IAAGG,IAAI,CAACG,IAAI,IAAI,IAAI,EAAEH,IAAI,CAACG,IAAI,GAAG,CAACN,IAAI,CAAC,CAAC,KAEpCG,IAAI,CAACG,IAAI,CAACC,IAAI,CAACP,IAAI,CAAC;EAG7B;EAGA,OAAOQ,QAAQA,CAAA,EAAG;IACdL,IAAI,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAEhB,OAAMD,CAAC,GAAG,GAAG,KAAKC,CAAC,GAAG,GAAG,EAAE;QACvBD,CAAC,IAAI,GAAG;QACRC,CAAC,IAAI,GAAG;QAER,IAAGD,CAAC,KAAK,CAAC,EAAE;MAChB;MAEA,OAAOA,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG;IAC5B,CAAC,CAAC;EACN;EAEA,OAAOC,QAAQA,CAACC,GAAG,EAAE;IACjB,OAAOV,IAAI,CAACU,GAAG,CAAC;EACpB;EAEA,OAAOC,WAAWA,CAACR,IAAI,EAAE;IACrB,IAAIS,KAAK,GAAG,EAAE;IAEdA,KAAK,IAAIT,IAAI,CAACU,MAAM,CAAC,CAAC;IAEtB,IAAGV,IAAI,CAACW,QAAQ,CAAC,CAAC,GAAG,EAAE,EAAEF,KAAK,IAAI,GAAG,GAAGT,IAAI,CAACW,QAAQ,CAAC,CAAC;IAEvDF,KAAK,IAAIT,IAAI,CAACY,OAAO,CAAC,CAAC,GAAG,GAAG;;IAE7B;;IAEA,OAAOH,KAAK;EAEhB;;EAEA;EACA,OAAOI,UAAUA,CAACC,MAAM,EAAE;IAEtB,IAAIC,IAAI,GAAGD,MAAM,GAAG,GAAG,GAAG,IAAI;IAC9BA,MAAM,IAAI,GAAG;IACb,IAAIE,KAAK,GAAGF,MAAM,GAAG,GAAG;IACxBA,MAAM,IAAI,GAAG;IACb,IAAIP,GAAG,GAAGO,MAAM,GAAG,GAAG;IAEtB,IAAId,IAAI,GAAG,IAAIiB,IAAI,CAACF,IAAI,EAAEC,KAAK,EAAET,GAAG,CAAC;IAErC,OAAOP,IAAI;EAKf;AAGJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}