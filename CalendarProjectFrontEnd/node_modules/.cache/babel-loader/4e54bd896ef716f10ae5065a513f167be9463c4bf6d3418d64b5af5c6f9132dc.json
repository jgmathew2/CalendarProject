{"ast":null,"code":"var _jsxFileName = \"/Users/johanmathew/Documents/Web Design Folder/react-test/src/components/Day/Day.js\";\nimport \"./Day.css\";\nimport Notification from \"./Day\";\nimport Calendar from \"../Calendar/Calendar\";\nimport TaskDictionary from \"../../utility/TaskDictionary\";\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Day(props) {\n  //TODO: Fix this\n\n  if (props.date == null) return;\n\n  // Need this to display num notifs \n  let dateConv = TaskDictionary.convertDate(props.date);\n  let arr = TaskDictionary.getTasks(dateConv);\n  if (arr != null) console.log(dateConv);\n\n  //let [dayClass, setDayClass] = useState(getDayClass()); \n\n  let isToday = Math.abs(props.date.getTime() - Date.now()) < 10 ** 6;\n  function getDayClass() {\n    if (props.date.getMonth() != Calendar.currMonth) return \"hidden\";else if (isToday === true) return \"today\";\n    return \"current\";\n  }\n  function dateClicked() {\n    const dateChange = new CustomEvent(\"focusDateChange\", {\n      detail: {\n        date: props.date\n      },\n      bubbles: true,\n      cancelable: true,\n      composed: true\n    });\n    document.dispatchEvent(dateChange);\n  }\n\n  // boolean to check if certain Date object represents current day\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"date_box\",\n    className: getDayClass(),\n    onClick: dateClicked,\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      notifs: TaskDictionary.getTasks(dateConv),\n      id: \"notification\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"month\",\n      children: props.month\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"day\",\n      children: props.date.getDate()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this)\n  //Add JSX Code\n  ;\n}\n_c = Day;\nexport default Day;\nvar _c;\n$RefreshReg$(_c, \"Day\");","map":{"version":3,"names":["Notification","Calendar","TaskDictionary","useState","jsxDEV","_jsxDEV","Day","props","date","dateConv","convertDate","arr","getTasks","console","log","isToday","Math","abs","getTime","Date","now","getDayClass","getMonth","currMonth","dateClicked","dateChange","CustomEvent","detail","bubbles","cancelable","composed","document","dispatchEvent","id","className","onClick","children","notifs","fileName","_jsxFileName","lineNumber","columnNumber","month","getDate","_c","$RefreshReg$"],"sources":["/Users/johanmathew/Documents/Web Design Folder/react-test/src/components/Day/Day.js"],"sourcesContent":["import \"./Day.css\"; \nimport Notification from \"./Day\"; \nimport Calendar from \"../Calendar/Calendar\"; \nimport TaskDictionary from \"../../utility/TaskDictionary\";\n\nimport {useState} from 'react'; \n\nfunction Day(props) {\n\n\n    //TODO: Fix this\n\n    if(props.date == null) return; \n\n\n    // Need this to display num notifs \n    let dateConv = TaskDictionary.convertDate(props.date); \n\n    let arr = TaskDictionary.getTasks(dateConv); \n\n    if(arr != null) console.log(dateConv)\n\n    //let [dayClass, setDayClass] = useState(getDayClass()); \n\n    let isToday = (Math.abs(props.date.getTime() - Date.now()) < 10**6); \n\n    function getDayClass() {\n        if(props.date.getMonth() != Calendar.currMonth ) return \"hidden\"; \n        else if(isToday===true) return \"today\"; \n        return \"current\"; \n    }\n  \n    function dateClicked() {\n        const dateChange = new CustomEvent(\"focusDateChange\", {\n            detail: {date: props.date},\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n          });\n\n        document.dispatchEvent(dateChange); \n    }    \n\n    // boolean to check if certain Date object represents current day\n\n    return (\n        <div id=\"date_box\" className={getDayClass()} onClick={dateClicked}>\n            <Notification notifs = {TaskDictionary.getTasks(dateConv)} id=\"notification\"> </Notification>\n            <p id=\"month\">{props.month}</p>\n            <p id=\"day\">{props.date.getDate()}</p>\n        </div>\n        //Add JSX Code\n    );\n}\n\n\nexport default Day; \n\n "],"mappings":";AAAA,OAAO,WAAW;AAClB,OAAOA,YAAY,MAAM,OAAO;AAChC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAOC,cAAc,MAAM,8BAA8B;AAEzD,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,GAAGA,CAACC,KAAK,EAAE;EAGhB;;EAEA,IAAGA,KAAK,CAACC,IAAI,IAAI,IAAI,EAAE;;EAGvB;EACA,IAAIC,QAAQ,GAAGP,cAAc,CAACQ,WAAW,CAACH,KAAK,CAACC,IAAI,CAAC;EAErD,IAAIG,GAAG,GAAGT,cAAc,CAACU,QAAQ,CAACH,QAAQ,CAAC;EAE3C,IAAGE,GAAG,IAAI,IAAI,EAAEE,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;;EAErC;;EAEA,IAAIM,OAAO,GAAIC,IAAI,CAACC,GAAG,CAACV,KAAK,CAACC,IAAI,CAACU,OAAO,CAAC,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,IAAE,CAAE;EAEnE,SAASC,WAAWA,CAAA,EAAG;IACnB,IAAGd,KAAK,CAACC,IAAI,CAACc,QAAQ,CAAC,CAAC,IAAIrB,QAAQ,CAACsB,SAAS,EAAG,OAAO,QAAQ,CAAC,KAC5D,IAAGR,OAAO,KAAG,IAAI,EAAE,OAAO,OAAO;IACtC,OAAO,SAAS;EACpB;EAEA,SAASS,WAAWA,CAAA,EAAG;IACnB,MAAMC,UAAU,GAAG,IAAIC,WAAW,CAAC,iBAAiB,EAAE;MAClDC,MAAM,EAAE;QAACnB,IAAI,EAAED,KAAK,CAACC;MAAI,CAAC;MAC1BoB,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,IAAI;MAChBC,QAAQ,EAAE;IACZ,CAAC,CAAC;IAEJC,QAAQ,CAACC,aAAa,CAACP,UAAU,CAAC;EACtC;;EAEA;;EAEA,oBACIpB,OAAA;IAAK4B,EAAE,EAAC,UAAU;IAACC,SAAS,EAAEb,WAAW,CAAC,CAAE;IAACc,OAAO,EAAEX,WAAY;IAAAY,QAAA,gBAC9D/B,OAAA,CAACL,YAAY;MAACqC,MAAM,EAAInC,cAAc,CAACU,QAAQ,CAACH,QAAQ,CAAE;MAACwB,EAAE,EAAC,cAAc;MAAAG,QAAA,EAAC;IAAC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAc,CAAC,eAC7FpC,OAAA;MAAG4B,EAAE,EAAC,OAAO;MAAAG,QAAA,EAAE7B,KAAK,CAACmC;IAAK;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BpC,OAAA;MAAG4B,EAAE,EAAC,KAAK;MAAAG,QAAA,EAAE7B,KAAK,CAACC,IAAI,CAACmC,OAAO,CAAC;IAAC;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC;EACL;EAAA;AAER;AAACG,EAAA,GA9CQtC,GAAG;AAiDZ,eAAeA,GAAG;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}