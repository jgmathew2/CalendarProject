{"ast":null,"code":"import axios from 'axios';\nimport TaskDictionary from './TaskDictionary';\nexport default class DatabaseConnector {\n  static async addTask(task) {\n    var config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: 'http://localhost:8080/',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      data: JSON.stringify(task)\n    };\n    await axios(config).then().catch(err => console.log(err));\n  }\n  static async getData() {\n    if (this.dataRead) return;else this.dataRead = true;\n    await axios.get(\"http://localhost:8080/\").then(res => {\n      for (let task of res.data) {\n        let date = parseInt(task.date);\n        TaskDictionary.addTask(date, {\n          date: date,\n          todo: task.task\n        }, true);\n      }\n    });\n  }\n\n  //Implement later after u do front end \n  /*\n  static updateTask()\n   */\n}\nDatabaseConnector.dataRead = false;","map":{"version":3,"names":["axios","TaskDictionary","DatabaseConnector","addTask","task","config","method","maxBodyLength","Infinity","url","headers","data","JSON","stringify","then","catch","err","console","log","getData","dataRead","get","res","date","parseInt","todo"],"sources":["/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/DatabaseConnector.js"],"sourcesContent":["import axios from 'axios'; \nimport TaskDictionary from './TaskDictionary';\n\nexport default class DatabaseConnector {\n\n    static dataRead = false; \n\n    static async addTask(task) {\n\n        var config = {\n            method: 'post',\n            maxBodyLength: Infinity,\n            url: 'http://localhost:8080/',\n            headers: { \n            'Content-Type': 'application/json'\n            },\n            data : JSON.stringify(task)\n        };\n\n        await axios(config).then().catch(err=>console.log(err)); \n    }\n\n    static async getData() {\n        if(this.dataRead) return; \n        else this.dataRead = true; \n        await axios.get(\"http://localhost:8080/\")\n            .then((res) => {\n                for(let task of res.data) {\n                    let date = parseInt(task.date);\n                    TaskDictionary.addTask(date, {date:date, todo: task.task}, true); \n                }\n            }); \n    }\n\n    //Implement later after u do front end \n    /*\n    static updateTask()\n\n    */\n\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,eAAe,MAAMC,iBAAiB,CAAC;EAInC,aAAaC,OAAOA,CAACC,IAAI,EAAE;IAEvB,IAAIC,MAAM,GAAG;MACTC,MAAM,EAAE,MAAM;MACdC,aAAa,EAAEC,QAAQ;MACvBC,GAAG,EAAE,wBAAwB;MAC7BC,OAAO,EAAE;QACT,cAAc,EAAE;MAChB,CAAC;MACDC,IAAI,EAAGC,IAAI,CAACC,SAAS,CAACT,IAAI;IAC9B,CAAC;IAED,MAAMJ,KAAK,CAACK,MAAM,CAAC,CAACS,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAEC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;EAC3D;EAEA,aAAaG,OAAOA,CAAA,EAAG;IACnB,IAAG,IAAI,CAACC,QAAQ,EAAE,OAAO,KACpB,IAAI,CAACA,QAAQ,GAAG,IAAI;IACzB,MAAMpB,KAAK,CAACqB,GAAG,CAAC,wBAAwB,CAAC,CACpCP,IAAI,CAAEQ,GAAG,IAAK;MACX,KAAI,IAAIlB,IAAI,IAAIkB,GAAG,CAACX,IAAI,EAAE;QACtB,IAAIY,IAAI,GAAGC,QAAQ,CAACpB,IAAI,CAACmB,IAAI,CAAC;QAC9BtB,cAAc,CAACE,OAAO,CAACoB,IAAI,EAAE;UAACA,IAAI,EAACA,IAAI;UAAEE,IAAI,EAAErB,IAAI,CAACA;QAAI,CAAC,EAAE,IAAI,CAAC;MACpE;IACJ,CAAC,CAAC;EACV;;EAEA;EACA;AACJ;AACA;AAGA;AArCqBF,iBAAiB,CAE3BkB,QAAQ,GAAG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}