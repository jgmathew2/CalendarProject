{"ast":null,"code":"import Task from \"./Task\";\nexport default class TaskDictionary {\n  contructor() {}\n  static addTask(date, Task) {\n    //date refers to hashcoded date, not date object \n\n    if (date == null) date = 0;\n    var dict = TaskDictionary.dict;\n    if (dict[date] == null) {\n      dict[date] = [Task];\n    } else dict[date].push(Task);\n  }\n\n  // Sorting mechanism doesn't work b/c object keys aren't ordered\n  static sortDict() {\n    var dict = TaskDictionary.dict;\n    dict.sort((a, b) => {\n      while (a % 100 === b % 100) {\n        a /= 100;\n        b /= 100;\n        if (a === 0) break;\n      }\n      return a % 100 - b % 100;\n    });\n  }\n  static getTasks(day) {\n    var dict = TaskDictionary.dict;\n    return dict[day];\n  }\n  static convertDate(date) {\n    //if(date == null) return 0;  \n\n    let value = \"\";\n    value += date.getDate();\n    if (date.getMonth() < 10) value += \"0\" + (date.getMonth() + 1);\n    value += date.getYear() % 100;\n\n    // Returns key to get data from dict \n    return parseInt(value);\n  }\n\n  // Returns date given number input \n  static revertDate(number) {\n    if (number == 0) return null;\n    let year = number % 100 + 2000;\n    number /= 100;\n    let month = number % 100 - 1;\n    number /= 100;\n    let day = number % 100;\n    let date = new Date(year, month, day);\n    return date;\n  }\n}\n// Key should be date in the form of a int, day/month/year\nTaskDictionary.dict = {};","map":{"version":3,"names":["Task","TaskDictionary","contructor","addTask","date","dict","push","sortDict","sort","a","b","getTasks","day","convertDate","value","getDate","getMonth","getYear","parseInt","revertDate","number","year","month","Date"],"sources":["/Users/johanmathew/Documents/Web Design Folder/react-test/src/utility/TaskDictionary.js"],"sourcesContent":["import Task from \"./Task\"; \n\nexport default class TaskDictionary {\n\n    // Key should be date in the form of a int, day/month/year\n\n    static dict = {}; \n\n    contructor() {}\n\n    static addTask(date, Task) {\n\n        //date refers to hashcoded date, not date object \n\n        if(date == null) date = 0; \n\n        var dict = TaskDictionary.dict; \n\n        if(dict[date] == null) {\n            dict[date] = [Task]; \n        }\n\n        else dict[date].push(Task); \n\n    }\n\n    // Sorting mechanism doesn't work b/c object keys aren't ordered\n    static sortDict() {\n        var dict = TaskDictionary.dict; \n\n        dict.sort((a, b) => {\n\n            while(a % 100 === b % 100) {\n                a /= 100; \n                b /= 100; \n\n                if(a === 0) break; \n            }\n\n            return a % 100 - b % 100; \n        }); \n    }\n\n    static getTasks(day) {\n        var dict = TaskDictionary.dict; \n        return dict[day]; \n    }\n\n    static convertDate(date) {\n\n        //if(date == null) return 0;  \n\n        let value = \"\"; \n\n        value += date.getDate(); \n\n        if(date.getMonth() < 10) value += \"0\" + (date.getMonth() + 1); \n\n    \n\n        value += date.getYear() % 100; \n\n        // Returns key to get data from dict \n        return parseInt(value); \n\n    }\n\n    // Returns date given number input \n    static revertDate(number) {\n\n        if(number == 0) return null; \n\n        let year = number % 100 + 2000; \n\n        number /= 100; \n        let month = number % 100 - 1; \n        number /= 100; \n        let day = number % 100; \n\n        let date = new Date(year, month, day); \n\n        return date; \n\n    }\n\n\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAEzB,eAAe,MAAMC,cAAc,CAAC;EAMhCC,UAAUA,CAAA,EAAG,CAAC;EAEd,OAAOC,OAAOA,CAACC,IAAI,EAAEJ,IAAI,EAAE;IAEvB;;IAEA,IAAGI,IAAI,IAAI,IAAI,EAAEA,IAAI,GAAG,CAAC;IAEzB,IAAIC,IAAI,GAAGJ,cAAc,CAACI,IAAI;IAE9B,IAAGA,IAAI,CAACD,IAAI,CAAC,IAAI,IAAI,EAAE;MACnBC,IAAI,CAACD,IAAI,CAAC,GAAG,CAACJ,IAAI,CAAC;IACvB,CAAC,MAEIK,IAAI,CAACD,IAAI,CAAC,CAACE,IAAI,CAACN,IAAI,CAAC;EAE9B;;EAEA;EACA,OAAOO,QAAQA,CAAA,EAAG;IACd,IAAIF,IAAI,GAAGJ,cAAc,CAACI,IAAI;IAE9BA,IAAI,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAEhB,OAAMD,CAAC,GAAG,GAAG,KAAKC,CAAC,GAAG,GAAG,EAAE;QACvBD,CAAC,IAAI,GAAG;QACRC,CAAC,IAAI,GAAG;QAER,IAAGD,CAAC,KAAK,CAAC,EAAE;MAChB;MAEA,OAAOA,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG;IAC5B,CAAC,CAAC;EACN;EAEA,OAAOC,QAAQA,CAACC,GAAG,EAAE;IACjB,IAAIP,IAAI,GAAGJ,cAAc,CAACI,IAAI;IAC9B,OAAOA,IAAI,CAACO,GAAG,CAAC;EACpB;EAEA,OAAOC,WAAWA,CAACT,IAAI,EAAE;IAErB;;IAEA,IAAIU,KAAK,GAAG,EAAE;IAEdA,KAAK,IAAIV,IAAI,CAACW,OAAO,CAAC,CAAC;IAEvB,IAAGX,IAAI,CAACY,QAAQ,CAAC,CAAC,GAAG,EAAE,EAAEF,KAAK,IAAI,GAAG,IAAIV,IAAI,CAACY,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAI7DF,KAAK,IAAIV,IAAI,CAACa,OAAO,CAAC,CAAC,GAAG,GAAG;;IAE7B;IACA,OAAOC,QAAQ,CAACJ,KAAK,CAAC;EAE1B;;EAEA;EACA,OAAOK,UAAUA,CAACC,MAAM,EAAE;IAEtB,IAAGA,MAAM,IAAI,CAAC,EAAE,OAAO,IAAI;IAE3B,IAAIC,IAAI,GAAGD,MAAM,GAAG,GAAG,GAAG,IAAI;IAE9BA,MAAM,IAAI,GAAG;IACb,IAAIE,KAAK,GAAGF,MAAM,GAAG,GAAG,GAAG,CAAC;IAC5BA,MAAM,IAAI,GAAG;IACb,IAAIR,GAAG,GAAGQ,MAAM,GAAG,GAAG;IAEtB,IAAIhB,IAAI,GAAG,IAAImB,IAAI,CAACF,IAAI,EAAEC,KAAK,EAAEV,GAAG,CAAC;IAErC,OAAOR,IAAI;EAEf;AAGJ;AAlFI;AAFiBH,cAAc,CAIxBI,IAAI,GAAG,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}