[{"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/index.js":"1","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/App.js":"2","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/reportWebVitals.js":"3","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/LeftTaskBar/LeftTaskBar.js":"4","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/Calendar/Calendar.js":"5","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/RightTaskBar/RightTaskBar.js":"6","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/AddTaskForm/AddTaskForm.js":"7","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/TaskComp/TaskComp.js":"8","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/TaskDictionary.js":"9","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/Day/Day.js":"10","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/Task.js":"11","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/Notification/Notification.js":"12","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/DatabaseConnector.js":"13"},{"size":626,"mtime":1687884114147,"results":"14","hashOfConfig":"15"},{"size":586,"mtime":1687884160491,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1686333893743,"results":"17","hashOfConfig":"15"},{"size":2181,"mtime":1687789466528,"results":"18","hashOfConfig":"15"},{"size":6554,"mtime":1687884105671,"results":"19","hashOfConfig":"15"},{"size":2829,"mtime":1687788440210,"results":"20","hashOfConfig":"15"},{"size":1858,"mtime":1687840583216,"results":"21","hashOfConfig":"15"},{"size":833,"mtime":1687840383488,"results":"22","hashOfConfig":"15"},{"size":3212,"mtime":1687884769883,"results":"23","hashOfConfig":"15"},{"size":1460,"mtime":1687489328065,"results":"24","hashOfConfig":"15"},{"size":243,"mtime":1687339789951,"results":"25","hashOfConfig":"15"},{"size":359,"mtime":1687489888575,"results":"26","hashOfConfig":"15"},{"size":1395,"mtime":1687884849543,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vdqayc",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"37"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/index.js",[],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/App.js",[],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/reportWebVitals.js",[],[],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/LeftTaskBar/LeftTaskBar.js",["73"],[],"import TaskDictionary from \"./../../utility/TaskDictionary\"; \nimport Task from \"./../TaskComp/TaskComp\"; \nimport \"./LeftTaskBar.css\"; \nimport AddTaskForm from \"../AddTaskForm/AddTaskForm\";\nimport {useState} from 'react'; \n\nexport default function LeftTaskBar() {\n\n\n\n    \n   // Placeholder, need function to force re-render when tasklist is updated \n   let [placeholder, updateTasks] = useState(1);\n\n   //Sets date based on when date clicked using custom event fired in day.js\n   document.addEventListener(\"updatedTasks\", (event) => {\n    // Inputted 0 irrelevant, just needed to force re-render\n    updateTasks(Math.random()); \n}); \n\n    let taskList = []; \n\n    //Should get you nearest dates in chronological order\n\n    \n    for(let task of TaskDictionary.array) {\n        if(taskList.length < 10) taskList.push(task);\n        else break;  \n    }\n\n    \n    if(taskList == null) return ( \n        <div>\n            <p id=\"taskbar-title\"> \n                TODO:\n            </p>\n        </div>\n   ); \n\n\n    return (\n        // Task Refers to TaskComp, not utility class. Utility class not directly needed \n        // in this context\n\n        <div id=\"left-tb-position\">\n            <table>\n                <thead id=\"taskbar-title\">\n                     TODO: \n                </thead>\n\n                <tbody id=\"ltb-body\">\n\n                    <Task task = {taskList[0]} ></Task>\n                    <Task task = {taskList[1]} ></Task>\n                    <Task task = {taskList[2]} ></Task>\n                    <Task task = {taskList[3]} ></Task>\n                    <Task task = {taskList[4]} ></Task>\n                    <Task task = {taskList[5]} ></Task>\n                    <Task task = {taskList[6]} ></Task>\n                    <Task task = {taskList[7]} ></Task>\n                    <Task task = {taskList[8]} ></Task>\n                    <Task task = {taskList[9]} ></Task>\n\n                </tbody>\n             \n            </table>\n\n            <AddTaskForm trigger={\n                <button id=\"ltb-add-button\">\n                    <i className=\"fa fa-plus\"></i>\n                </button>\n            }           \n            ></AddTaskForm>\n        </div>\n    );\n}","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/Calendar/Calendar.js",["74"],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/RightTaskBar/RightTaskBar.js",["75"],[],"import TaskDictionary from \"./../../utility/TaskDictionary\"; \nimport Task from \"./../TaskComp/TaskComp\"; \nimport {useState} from 'react'; \nimport \"./RightTaskBar.css\"; \n\nimport AddTaskForm from \"../AddTaskForm/AddTaskForm\";\n\n\nexport default function RightTaskBar() {\n\n    let [date, setDate] = useState(TaskDictionary.convertDate(new Date(Date.now()))); \n\n    // Placeholder, need function to force re-render when tasklist is updated \n    let [placeholder, updateTasks] = useState(1);\n\n    //Sets date based on when date clicked using custom event fired in day.js\n\n    document.addEventListener(\"focusDateChange\", (event) =>\n    setDate(TaskDictionary.convertDate(event.detail.date))); \n\n    document.addEventListener(\"updatedTasks\", (event) => {\n        // Inputted 0 irrelevant, just needed to force re-render\n        updateTasks(Math.random()); \n    }); \n\n    // date is in the form of int key for dictionary, NOT date object \n\n    let taskList = TaskDictionary.getTasks(date); \n\n    \n    if(taskList == null) return ( \n        <div id=\"right-tb-position\">\n            \n            <p id=\"taskbar-title\"> \n                {TaskDictionary.revertDate(date).toString().substring(0, 15)} \n            </p>\n            \n\n            <AddTaskForm trigger={\n                <button id=\"rtb-add-button\">\n                    <i className=\"fa fa-plus\"></i>\n                </button>\n            }           \n            date={date}></AddTaskForm>\n\n        </div>\n   ); \n\n\n    return (\n        // Task Refers to TaskComp, not utility class. Utility class not directly needed \n        // in this context\n\n        <div id=\"right-tb-position\">\n            <table>\n                <thead id=\"taskbar-title\">\n                     {TaskDictionary.revertDate(date).toString().substring(0, 15)}\n                </thead>\n\n                <tbody>\n\n                    <Task task = {taskList[0]} rtb = {true}></Task>\n                    <Task task = {taskList[1]} rtb = {true}></Task>\n                    <Task task = {taskList[2]} rtb = {true}></Task>\n                    <Task task = {taskList[3]} rtb = {true}></Task>\n                    <Task task = {taskList[4]} rtb = {true}></Task>\n                    <Task task = {taskList[5]} rtb = {true}></Task>\n                    <Task task = {taskList[6]} rtb = {true}></Task>\n                    <Task task = {taskList[7]} rtb = {true}></Task>\n                    <Task task = {taskList[8]} rtb = {true}></Task>\n                    <Task task = {taskList[9]} rtb = {true}></Task>\n\n                </tbody>\n             \n            </table>\n\n            <AddTaskForm trigger={\n                <button id=\"rtb-add-button\">\n                    <i className=\"fa fa-plus\"></i>\n                </button>\n            }           \n            date={date}></AddTaskForm>\n            \n        </div>\n    );\n}","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/AddTaskForm/AddTaskForm.js",["76"],[],"import Popup from 'reactjs-popup'; \nimport TaskDictionary from '../../utility/TaskDictionary';\nimport Task from '../../utility/Task';\n\nimport {useState} from 'react'; \n\nexport default function AddTaskForm(props) {\n\n\n    const [taskData, setData] = useState({date: props.date, todo: \"\", time: \"\"});\n\n    return (\n        \n        <Popup trigger={props.trigger}>\n\n            <form>\n                <label for=\"task_input\">Description:</label>\n                <input type=\"text\" id=\"task_input\"\n                    onChange={\n                        (e) => {\n                            setData({...taskData, todo: e.target.value}); \n                        }\n                    }></input>\n\n                <br></br>\n\n                <label for=\"date_input\" hidden={props.date != null} >Due Date (D/M/Yr):</label>\n                <input type=\"text\" id=\"date_input\" hidden={props.date != null} \n                    onChange={\n                        (e) => {\n                            setData({...taskData, date: e.target.value}); \n                        }\n                    }\n                ></input>\n\n                <br></br>\n\n                <label for=\"time_input\" >Schedule:</label>\n                <input type=\"text\" id=\"time_input\" \n                    onChange={\n                        (e) => {\n                            \n                            setData({...taskData, time: e.target.value}); \n                        }\n                    }></input>\n\n            </form>\n\n            <button onClick={getFormData}> Submit: </button>\n\n        </Popup>\n\n    ); \n\n    function getFormData() {\n\n        if(taskData.todo.trim() == \"\") return; \n\n        if(props.date != null) taskData.date = props.date; \n\n        let task = new Task(taskData.date, taskData.todo, taskData.time); \n\n        TaskDictionary.addTask(taskData.date, task); \n    }\n}","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/TaskComp/TaskComp.js",[],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/TaskDictionary.js",["77","78","79","80"],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/Day/Day.js",["81","82"],[],"import \"./Day.css\"; \nimport Notification from \"../Notification/Notification\";\nimport Calendar from \"../Calendar/Calendar\"; \nimport TaskDictionary from \"../../utility/TaskDictionary\";\n\nimport {useState} from 'react'; \n\nfunction Day(props) {\n\n\n    //TODO: Fix this\n\n    if(props.date == null) return; \n\n\n    // Need this to display num notifs \n    let dateConv = TaskDictionary.convertDate(props.date); \n\n    //let [dayClass, setDayClass] = useState(getDayClass()); \n\n    let isToday = (Math.abs(props.date.getTime() - Date.now()) < 10**6); \n\n    function getDayClass() {\n        if(props.date.getMonth() != Calendar.currMonth ) return \"hidden\"; \n        else if(isToday===true) return \"today\"; \n        return \"current\"; \n    }\n  \n    function dateClicked() {\n        const dateChange = new CustomEvent(\"focusDateChange\", {\n            detail: {date: props.date},\n            bubbles: true,\n            cancelable: true,\n            composed: true,\n          });\n\n        document.dispatchEvent(dateChange); \n\n\n    }  \n    // boolean to check if certain Date object represents current day\n\n    return (\n        <div id=\"date_box\" className={getDayClass()} onClick={dateClicked}>\n\n            <Notification notifs = {TaskDictionary.getTasks(dateConv)} taskComp={props.taskComp}> </Notification>\n            <p id=\"month\">{props.month}</p>\n            <p id=\"day\">{props.date.getDate()}</p>\n        </div>\n        //Add JSX Code\n    );\n}\n\n\nexport default Day; \n\n ","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/Task.js",[],[],"/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/components/Notification/Notification.js",["83"],[],"import \"./Notification.css\"; \n\nfunction Notification(props) {   \n\n    if(props.notifs == null) {\n        return; \n    } \n    \n    return (\n        <div id=\"notification\" hidden={props.notifs.length === 0 || props.taskComp == true}>\n            \n            <p id=\"num_total\"> {props.notifs.length} </p>\n        </div>\n\n    );\n\n}\n\nexport default Notification; ","/Users/johanmathew/Documents/Github/CalendarProject/CalendarProjectFrontEnd/src/utility/DatabaseConnector.js",[],[],{"ruleId":"84","severity":1,"message":"85","line":13,"column":9,"nodeType":"86","messageId":"87","endLine":13,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":15,"column":9,"nodeType":"86","messageId":"87","endLine":15,"endColumn":20},{"ruleId":"84","severity":1,"message":"85","line":14,"column":10,"nodeType":"86","messageId":"87","endLine":14,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":57,"column":33,"nodeType":"90","messageId":"91","endLine":57,"endColumn":35},{"ruleId":"88","severity":1,"message":"89","line":62,"column":17,"nodeType":"90","messageId":"91","endLine":62,"endColumn":19},{"ruleId":"88","severity":1,"message":"89","line":82,"column":25,"nodeType":"90","messageId":"91","endLine":82,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":134,"column":19,"nodeType":"90","messageId":"91","endLine":134,"endColumn":21},{"ruleId":"88","severity":1,"message":"89","line":134,"column":34,"nodeType":"90","messageId":"91","endLine":134,"endColumn":36},{"ruleId":"84","severity":1,"message":"92","line":6,"column":9,"nodeType":"86","messageId":"87","endLine":6,"endColumn":17},{"ruleId":"88","severity":1,"message":"93","line":24,"column":34,"nodeType":"90","messageId":"91","endLine":24,"endColumn":36},{"ruleId":"88","severity":1,"message":"89","line":10,"column":84,"nodeType":"90","messageId":"91","endLine":10,"endColumn":86},"no-unused-vars","'placeholder' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","Expected '!==' and instead saw '!='."]